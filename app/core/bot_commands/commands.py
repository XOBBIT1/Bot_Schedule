from aiogram import types
from aiogram.fsm.context import FSMContext

from app.core.keyboards.starter_keyboard import keyboard_beginner, keyboard_admin, back_to_menu_admin
from app.core.servises.serves_user import create_user, get_user_name, sign_up_user_for_training, cancel_training, \
    check_user
from app.core.servises.serves_training import create_training, delete_training_by_id
from app.core.staets.bot_state import UserState, AdminState

create_training_dict = {}


async def ask_name(message: types.Message, state: FSMContext):
    user = await check_user(message)
    if user > 0:
        await state.set_state(UserState.any_text)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç <b>{await get_user_name(message)}</b>! üëã\n\n"
                             f"–†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç–µ !!!\n"
                             f"<b>–ñ–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –ø–æ–ª—è –Ω–∏–∂–µüëá –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–µ–±—è ü¶æ</b>\n\n"
                             f"–£–î–ê–ß–ò !!!", parse_mode="HTML", reply_markup=keyboard_beginner())
    else:
        await state.set_state(UserState.waiting_for_name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")


async def starter(message: types.Message, state: FSMContext):
    await create_user(message, message.text)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç <b>{message.text}</b>!\n\n"
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫üìã.\n\n"
                         f"<b>–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ø–æ –∏—Å—Ç–µ–Ω–µ –ñ–µ–ª–µ–∑–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º ?ü¶æü¶æü¶æ</b>\n\n"
                         f"–¢–æ–≥–¥–∞ <b>–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—É'</b>üëá –∏ "
                         f"–Ω–∞—á–∏–Ω–∞–π —Å–≤–æ–π –ø—É—Ç—å üõ£...\n\n"
                         f"–ï—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–µ—à—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ\n"
                         f"–∏ —è —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á—É —Ç–µ–±–µ) üòâ", parse_mode="HTML", reply_markup=keyboard_beginner())
    await state.update_data(name=message.text)
    await state.set_state(UserState.any_text)


async def dop_starter(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç <b>{await get_user_name(message)}</b>! üëã\n\n"
                         f"–†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç–µ !!!\n"
                         f"<b>–ñ–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –ø–æ–ª—è –Ω–∏–∂–µüëá –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–µ–±—è ü¶æ</b>\n\n"
                         f"–£–î–ê–ß–ò !!!", parse_mode="HTML", reply_markup=keyboard_beginner())


async def for_coach(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é <b>–î–∞–Ω–¥–∂–µ–Ω –º–∞—Å—Ç–µ—Ä–∞</b> –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        " üèÄÔ∏è <i>–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—É. <b>–¢—É—Ç —Ç—ã —É–∫–∞–∑—ã–≤–∞–µ—à—å –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏!</b></i>\n"
        " üèê <i>–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—É, –µ—Å–ª–∏, –¥–æ–ø—É—Å—Ç–∏–º, —Ç—ã —Ä–µ—à–∏–ª –ø–æ–º–µ–Ω—è—Ç—å –í—Ä–µ–º—è.</i>\n"
        " üéæ <i>–°–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–Ω—è—Ç—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫</i>\n"
        " üèâ <i>–ü—Ä–æ–º–æ—Ç—Ä –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—É</i>\n\n"
        "–ù–∞–¥–µ—é—Å—å —Ç–≤–æ–∏ —É—á–µ–Ω–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –º–æ–ª–∏—Ç—å –æ –ø–æ—â–∞–¥–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
        parse_mode="HTML", reply_markup=keyboard_admin()
    )


async def create_training_time_of_training(message: types.Message, state: FSMContext):
    await state.update_data(week_day=message.text)
    await message.answer("–í–≤–µ–¥–∏ <i>–í—Ä–µ–º—è –¢—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏</i> \n\n "
                         "–ü—Ä–∏–º–µ—Ä: <b><i>12:45</i></b>", parse_mode="HTML", reply_markup=back_to_menu_admin())
    await state.set_state(AdminState.time_of_training)


async def new_admin_menu(message: types.Message, state: FSMContext):
    data = await state.update_data(time_of_training=message.text)
    await create_training(data['week_day'], data['time_of_training'])
    await message.answer(
        f"<b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫–∞ –≤ <i>{data['week_day']} –≤ {data['time_of_training']}</i> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–∞!</b>\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
        parse_mode="HTML", reply_markup=keyboard_admin())
    await state.set_state(AdminState.new_menu_create)


async def delete_by_training_id(message: types.Message, state: FSMContext):
    data = await state.update_data(training_id=message.text)
    await delete_training_by_id(data['training_id'])
    await message.answer(
        f"<b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫–∞ <i>{data['training_id']}</i> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
        parse_mode="HTML", reply_markup=keyboard_admin())
    await state.set_state(AdminState.new_menu_delete)


async def sign_up_for_training_id(message: types.Message, state: FSMContext):
    data = await state.update_data(training_id=message.text)
    await sign_up_user_for_training(message, data['training_id'])
    await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫—É</b>!\n\n"
                         "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
                         parse_mode="HTML", reply_markup=keyboard_beginner())
    await state.update_data(name=message.text)
    await state.set_state(UserState.any_text)


async def terminate_training(message: types.Message, state: FSMContext):
    data = await state.update_data(training_id=message.text)
    await cancel_training(message, data['training_id'])
    await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ <b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫—É</b>!\n\n"
                         "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
                         parse_mode="HTML", reply_markup=keyboard_beginner())
    await state.set_state(UserState.any_text)
