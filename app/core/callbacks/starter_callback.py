from aiogram import types

from app.core.animation import loading
from app.core.keyboards.starter_keyboard import keyboard_admin, keyboard_beginner
from app.core.keyboards.trainings_keyboard import keyboard_choice
from app.core.servises.serves_training import get_all_not_booked_trainings
from aiogram.fsm.context import FSMContext

from app.core.servises.serves_user import user_trainings, sign_up_user_for_training, cancel_training
from app.core.staets.bot_state import UserState


async def sign_up_for_workout(callback: types.CallbackQuery):
    trainings = await get_all_not_booked_trainings()
    if len(trainings) == 0:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKcsFlHWy56I5Hj"
                                                      "YqU9yR232RVaua0FAAC4AIAAvPjvguHcvn0VaCySTAE")
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–∫ –Ω–µ—Ç!üò¢", parse_mode="HTML",
                                      reply_markup=keyboard_beginner())
    else:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKe1dlIsdqF7A69iUyRXTkpx"
                                                      "RAatS59gACPhUAAvUDQUkMAAFnGZ8Jhl0wBA")
        await callback.message.answer("–¢—É—Ç –ø—Ä–µ–¥–∞—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ üìã <i>–¢—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫</i> \n\n "
                                      "–¢—ã –º–æ–∂–µ—à—å <b>–≤—ã–±—Ä–∞—Ç—å –¢–†–ï–ù–ï–†–û–ö–£ –ù–ê –í–´–ë–û–†</b> "
                                      "–∏ —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—à–µ—à—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—É ‚úÖ.\n\n"
                                      "<b>üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫: </b>\n", parse_mode="HTML",
                                      reply_markup=await keyboard_choice("signup_button", trainings))


async def sign_up_for_training_id(callback: types.CallbackQuery, state: FSMContext):
    callback_data = callback.data
    training_id = callback_data.split('_')[2]
    await loading(callback.message)
    await sign_up_user_for_training(callback.message, training_id)
    await callback.message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫—É</b>!\n\n"
                                  "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
                                  parse_mode="HTML", reply_markup=keyboard_beginner())
    await state.update_data(name=callback.message.text)
    await state.set_state(UserState.any_text)


async def list_of_training(callback: types.CallbackQuery):
    trainings = await get_all_not_booked_trainings()
    if len(trainings) == 0:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKcvBlHXWMECwjS"
                                                      "reQQ73Z7seMMQIbswACbxYAAg2pAUj2ZN0NwJMQIDAE")
        await callback.message.answer("–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏ –∑–∞–Ω—è—Ç—ã ! üòÅ", parse_mode="HTML",
                                      reply_markup=keyboard_admin())
    else:
        await callback.message.answer("<b>üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫: </b>\n", parse_mode="HTML")
        for training in trainings:
            await callback.message.answer(f"<b>{training.id}.</b>"
                                          f" <i>{training.training_day} {training.training_time}</i>",
                                          parse_mode="HTML")
        await callback.message.answer(
            "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
            parse_mode="HTML", reply_markup=keyboard_admin())


async def all_user_trainings(callback: types.CallbackQuery):
    trainings = await user_trainings(callback.message)
    if len(trainings) == 0:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKcsFlHWy56I5Hj"
                                                      "YqU9yR232RVaua0FAAC4AIAAvPjvguHcvn0VaCySTAE")
        await callback.message.answer("–í—ã–ø–æ–∫–∞ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫—Éüò¢", parse_mode="HTML",
                                      reply_markup=keyboard_beginner())
    else:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKe1llIsgsUA54olWoLwABjRT2"
                                                      "momWoZUAAgQbAAJ1akFJMxhpFcprXMkwBA")
        await callback.message.answer("<b>üìã –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫: </b>\n", parse_mode="HTML")
        for training in trainings:
            await callback.message.answer(
                f"<i>{training.training_day} {training.training_time}</i>",
                parse_mode="HTML")
        await callback.message.answer(
            "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
            parse_mode="HTML", reply_markup=keyboard_beginner())


async def cancel_user_training(callback: types.CallbackQuery):
    trainings = await user_trainings(callback.message)
    if len(trainings) == 0:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKcr1lHWxfr-ggwpK_"
                                                      "FtjDAatB01J2bQACGwMAArrAlQWa_UGAaJawejAE")
        await callback.message.answer("–í–∞–º –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è", parse_mode="HTML",
                                      reply_markup=keyboard_beginner())
    else:
        await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAEKe1NlIsalusmAf_"
                                                      "MM3DwUuJtY3XtmZwACDg0AAlkAAZhL3larpAvx_n8wBA")
        await callback.message.answer("–í—ã–±–µ—Ä–∏, –∫–∞–∫—É—é —Ç—Ä–µ–Ω–µ—Ä–æ–∫—É –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
                                      "<b>üìã –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫: </b>\n", parse_mode="HTML",
                                      reply_markup=await keyboard_choice("terminate_button", trainings))


async def terminate_training(callback: types.CallbackQuery, state: FSMContext):
    callback_data = callback.data
    training_id = callback_data.split('_')[2]
    await loading(callback.message)
    await cancel_training(callback.message, training_id)
    await callback.message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ <b>–¢—Ä–µ–Ω–µ—Ä–æ–≤–∫—É</b>!\n\n"
                                  "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —Ç–æ —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∑—É üëá\n\n",
                                  parse_mode="HTML", reply_markup=keyboard_beginner())
    await state.set_state(UserState.any_text)
